<?xml version="1.0" encoding="UTF-8"?>
<tei xmlns="http://www.tei-c.org/ns/1.0">
<teiHeader>
<fileDesc xml:id="_1"/>
<encodingDesc>
<appInfo>
<application version="0.8.1-SNAPSHOT" ident="GROBID" when="2024-06-24T11:21+0000">
<ref target="https://github.com/kermitt2/grobid">A machine learning software for extracting information from scholarly documents</ref>
</application>
</appInfo>
</encodingDesc>
</teiHeader>
<text xml:lang="en">
<p>Motivation:
<rs xml:id="12965778" type="software">fastsimcoal2</rs> extends <rs xml:id="12965779" type="software">fastsimcoal</rs>, a continuous time coalescent-based genetic simulation program, by enabling the estimation of demographic parameters under very complex scenarios from the site frequency spectrum under a maximum-likelihood framework. Results: Other improvements include multi-threading, handling of population inbreeding, extended input file syntax facilitating the description of complex demographic scenarios, and more efficient simulations of sparsely structured populations and of large chromosomes. Availability and implementation:
<rs xml:id="12965780" type="software">fastsimcoal2</rs> is freely available on
<rs xml:id="12965781" type="url" corresp="12965780">http://cmpg.unibe.ch/software/fastsimcoal2/</rs>. It includes console versions for
<rs xml:id="12965782" type="software">Linux</rs>,
<rs xml:id="12965783" type="software">Windows</rs> and
<rs xml:id="12965784" type="software">MacOS</rs>, additional
<rs xml:id="12965785" type="software" subtype="implicit">scripts</rs> for the analysis and visualization of simulated and estimated scenarios, as well as a detailed documentation and ready-to-use examples.
</p>
<p>Coalescent theory (Kingman, 1982) has provided a very efficient framework to simulate the diversity of neutrally evolving loci (Hudson, 1990;Kelleher and Lohse, 2020;Marjoram and Wall, 2006). These simulations have been used extensively to check the validity of theoretical derivations, and to make predictions of the effect of complex demographic processes on the genomic diversity of populations. Due to their versatility, they have also been used in Approximate Bayesian Computations (ABC, Beaumont et al., 2002) to estimate parameters under very complex models and to perform model testing (Beaumont, 2019;Currat et al., 2019;Mondal et al., 2019;Sanchez et al., 2020;Wegmann et al., 2010). Several faster alternatives to ABC have been developed in the last ten years to estimate demographic parameters under relatively complex scenarios (Albers and McVean, 2020;Gutenkunst et al., 2009;Steinru ¨cken et al., 2019;Weissman and Hallatschek, 2017), many of them fitting the Site Frequency Spectrum (SFS) using exact derivations or approximations (e.g. Excoffier et al., 2013;Gutenkunst et al., 2009;Kamm et al., 2020;Liu and Fu, 2020). It has been shown that the expected SFS could be robustly estimated using coalescent simulations (Excoffier et al., 2013). A clear advantage of SFS-based methods is that the computing time is independent of the length of the analyzed genome. SFS-based methods, however, ignore information on linkage between sites, an information that is used in Hidden Markov Models-based approaches (e.g. Li and Durbin, 2011;Schiffels and Wang, 2020;Speidel et al., 2019;Terhorst et al., 2017) or those based on the
Ancestral Recombination Graph (e.g. Gronau et al., 2011;Kelleher et al., 2019). In this paper, we describe the latest implementation of
<rs xml:id="12965786" type="software">fastsimcoal
2</rs>, a coalescent-based
program that can estimate parameters from SFS under very complex demographic scenarios including continuous arbitrary size changes, gene flow, admixture events, bottlenecks, populations splitting, population growth, inbreeding, serial sampling and spatially structured populations. Compared to its initial release one decade ago <rs xml:id="12965823" type="bibr">(Excoffier and Foll, 2011)</rs>, <rs xml:id="12965788" type="software">fastsimcoal</rs> has been extended in several ways described below.
</p>
<p>2 Novelties implemented in <rs xml:id="12965789" type="software">fastsimcoal2</rs> <rs xml:id="12965790" type="software">fastsimcoal</rs> became <rs xml:id="12965791" type="software">fastsimcoal2</rs> (abbreviated <rs xml:id="12965792" type="software">fsc2</rs> in the following) with the implementation of demographic and mutation parameters inference from the SFS (Excoffier et al., 2013). While <rs xml:id="12965793" type="software">fsc2</rs> might not have a clear edge over other coalescent simulators of genomic diversity, like e.g. <rs xml:id="12965794" type="software">msprime</rs> <rs xml:id="12965824" type="bibr">(Kelleher and Lohse, 2020)</rs>, its innovation is rather in its built-in ability to perform parameter inference under complex evolutionary scenarios, and the most recent developments have therefore focused on this aspect.</p>
<p>For parameter inference, coalescent simulations are used to estimate the expected SFS following Nielsen (2000), and a multinomial likelihood (Adams and Hudson, 2004) is maximized using a conditional expectation maximization algorithm (Meng and Rubin, 1993) to estimate the parameters, one at a time over several optimization cycles. This approach has been shown to be very robust (Excoffier et al., 2013) and can, in principle, be applied to an arbitrarily large number of populations, whereas approaches based on analytically derived SFS can only handle a few populations [e.g. 3 populations in @a@i, (Gutenkunst et al., 2009) or 4-5 in <rs xml:id="12965796" type="software">dadi.
CUDA</rs> <rs xml:id="12965825" type="bibr">(Gutenkunst, 2021)</rs>], or do not deal with continuous gene flow [e.g. in <rs xml:id="12965798" type="software">momi2</rs> <rs xml:id="12965826" type="bibr">(Kamm et al., 2020)</rs>]. The trade-off for this robustness and versatility is that computing time, which is independent of genome size, will however increase linearly with the number of sampled genomes, but it remains reasonable given the speed improvements mentioned below. <rs xml:id="12965800" type="software">fsc2</rs> also gives the possibility to optimize the likelihood of the model considering all sites (monomorphic and polymorphic), polymorphic positions only or a mixed approach where optimization is first performed using likelihoods based on all sites, and then only considering polymorphic sites after a given number of cycles (-l command line option). Finally, it is now possible to ignore singleton sites (--nosingleton option), which might be useful when considering ancient DNA or low coverage data where some genotyping errors might have arisen. Note that while <rs xml:id="12965801" type="software">fsc2</rs> is using the SMC' approximation (Marjoram and Wall, 2006) of the Sequential Markov Coalescent (McVean and Cardin, 2005) for simulating diversity at linked sites, the SFS estimation is based on the simulation of independent coalescent gene trees.
</p>
<p>As compared to the first (but unpublished) version of <rs xml:id="12965802" type="software">fastsimcoal2 (fsc21)</rs>, several speed improvements have been performed. First, multi-threading has been introduced using the <rs xml:id="12965803" type="software">openMP</rs> framework (
<rs xml:id="12965804" type="url" corresp="12965803">https://gcc.gnu.org/onlinedocs/libgomp/</rs>), allowing one to distribute independent simulations over several threads (-c option). Second,
<rs xml:id="12965805" type="software" subtype="component" corresp="12965807">icsilog</rs> <rs xml:id="12965827" type="bibr">(Vinyals and Friedland, 2008)</rs>, a fast approximation of the log function (used to generate exponentially distributed coalescent times) is now used in
<rs xml:id="12965807" type="software" subtype="environment">fsc2</rs>, the precision of which can be specified by the user (--logprecision option). Full precision is used by default (logprecision 23), but computing speed can be improved by 10-25% by slightly lowering the precision (e.g. --logprecision 18)(see Fig. 1B-D). We have also optimized the simulation of large recombining chromosomes, obtaining a &gt; 5Â gain for the simulation of 1 Gblong chromosomes (Fig. 1A). Finally, we have optimized the simulations of samples drawn from large, subdivided populations (e.g. in a 2D stepping-stone), also leading to a drastic speed gain (6Â-60Â) for such simulations (see Fig. 1C andD).
</p>
<p>The syntax of input files has been enriched to facilitate the specification of complex evolutionary scenarios. In input parameter (.par) and template (.tpl) files, it is now possible to specify an inbreeding coefficient for each population in the sample section after the sampling times of the simulated lineages, which can be useful when samples are drawn from a subdivided population leading to a Wahlund effect (Wahlund, 2010) or when modeling a true inbred population. One can also define instantaneous bottlenecks (with the instbot keyword) in the historical events section. These bottlenecks are implemented as a single generation of intense rate of coalescence, and their intensity can be specified, where t is the duration of the bottleneck in generations and N is the effective size during the bottleneck. This implementation avoids the need to specify two separate parameters like the population size during the bottleneck N and its duration t, while leading to the same rate of coalescence. Population size changes are now also made simpler, as it is possible to resize a given population size to an absolute value (using the absoluteResize keyword) rather than to a relative value that often used to be computed as a complex parameter.</p>
<p>New options have also been made available in the parameter specification (.est) file. The most useful one is the possibility to specify the search range of a simple parameter as being bounded by the values of previously defined parameters using the paramInRange keyword. For instance, in the following example a bottleneck time (TBOT) can be defined to occur between two divergence times (TDIV1 and TDIV2), with TDIV2 being necessarily larger than TDIV1 as 1 TDIV1 unif 100 10000 output 1 TDIV2 unif TDIV1 10000 output paramInRange 1 TBOT unif TDIV1 TDIV2 output paramInRange Note that the combination of an absolute value and a parameter for the lower or upper bound can also be provided. Finally, new operations are now possible for the definition of complex parameters: abs(X) for computing the absolute value of X; X%min%Y and X%max%Y for finding the minimum and maximum of the numbers X and Y, respectively; &lt;condition&gt;? &lt;if true&gt;: &lt;if false&gt; for assigning values to a parameter depending on whether a condition is met.</p>
<p>Command line options now include the possibility to define initial parameter values for parameter estimation (--initvalues), which is useful when performing bootstrap confidence interval estimations. Finally, the 1D or 2D folded SFS can be computed in different populations using the --foldedSFS option, which simply folds the unfolded SFS irrespective of what is the overall minor allele among all populations, so as to provide compatibility with <rs xml:id="12965808" type="software">ANGSD</rs> <rs xml:id="12965828" type="bibr">(Korneliussen et al., 2014)</rs> folded SFS.</p>
<p>Several <rs xml:id="12965830" type="software" subtype="implicit">tools</rs> have been developed to facilitate the use of
<rs xml:id="12965811" type="software">fsc2</rs> and the analysis of the outputs it produces (see
<rs xml:id="12965812" type="url" corresp="12965830">http://cmpg.unibe.ch/soft ware/fastsimcoal2/additionalScripts.html</rs>). They include a shiny application and several <rs xml:id="12965813" type="language" corresp="12965816">bash</rs>,
<rs xml:id="12965814" type="language" corresp="12965816">R</rs> and <rs xml:id="12965815" type="language" corresp="12965816">python</rs>
<rs xml:id="12965816" type="software" subtype="implicit">scripts</rs> to 9i) prepare input files from VCFs, (ii) resample individuals in genomic blocks of arbitrary size for block bootstrap analyses, (iii) generate parametric bootstrap replicates, (iv) convert multidimensional SFS into a series of 1D and 2D SFS to visually compare observed and expected SFS, (v) identify the least well fitted SFS entries under a given model and (vi) visually inspect an evolutionary scenario embedded in an input (.par) file.
</p>
<p><rs xml:id="12965817" type="software">fsc2</rs> is a very versatile coalescent simulator able to handle evolutionary scenarios of arbitrary complexity. It can also be used to estimate demographic parameters under similarly complex scenarios from the site frequency spectrum, in a very consistent way. It can now also be used to analyze geographically structured populations in a faster way than some spatially explicit simulators [e.g.
<rs xml:id="12965818" type="software">SPLATCHE</rs><rs xml:id="12965819" type="version" corresp="12965818">3</rs> <rs xml:id="12965829" type="bibr">(Currat et al., 2019)</rs>], even though input files can still be very large as they can require an explicit definition of big migration matrices. The syntax of input file has been improved to build complex scenarios in a simpler and consistent way, eliminating the need of defining rules to establish a hierarchy among parameters.
<rs xml:id="12965821" type="software">fsc2</rs> is restricted to the simulation of neutral markers, but it can have a wide range of applications from the simulation of whole recombining genomes with complex architectures, to the estimation of parameters in models including many populations exchanging arbitrary and changing numbers of migrants over time, or model comparisons via likelihood-ratio tests or AIC. It has been applied to a variety of organisms including humans (e.g. Malaspinas et al., 2016;Pouyet et al., 2018), animals (Armstrong et al., 2021;de Manuel et al., 2016;Marques et al., 2019Marques et al., , 2018;;Meier et al., 2017), plants (Gonza ´lez-Martı ´nez et al., 2017;Lu et al., 2019) or microbes (Montano et al., 2015;Va ´zquez-Rosas-Landa et al., 2020), and it can deal with ancient DNA samples and establish their relationships with modern samples (e.g. Sikora et al., 2019Sikora et al., , 2017)).
</p>
<p><rs xml:id="12965822" type="software">fastsimcoal2</rs></p>
<p>Downloaded from https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/btab468/6308558 by guest on 10 August 2021</p>
<p>The authors thank the following people for their comments on and their testing of fsc2: Isabel Alves, Alexandre Thie ´ry, Matthieu Foll and Miguel Arenas Busto.</p>
<p>This work was supported by the Swiss National Science Foundation [310030_188883 to L.E. and 31003A_163338 to L.E. and Ole Seehausen]. V.C.S. was funded by the Portuguese National Science Foundation À Fundac¸ão para a Cie ˆncia e a Tecnologia [FCT; CEECINST/00032/2018/ CP1523/CT0008 and UIDB/00329/2020 granted to cE3c].</p>
<p>Conflict of Interest: none declared.</p>
</text>
</tei>